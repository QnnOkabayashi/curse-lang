use crate::lexer::*;
use curse_ast::*;

grammar<'ast, 'input>(ctx: &'ast Context<'ast, 'input>);

extern {
    type Location = usize;
    type Error = LexError;

    enum Token<'input> {
        // In the grammar, if we specify the string on the lhs,
        // it means that we're waiting for the lexer to
        // give us the rhs.
        "ident literal" => Token::Ident(<tok::Ident<'input>>),
        "integer literal" => Token::Integer(<tok::Integer<'input>>),
        ":" => Token::Colon(<tok::Colon>),
        "," => Token::Comma(<tok::Comma>),
        "(" => Token::LParen(<tok::LParen>),
        ")" => Token::RParen(<tok::RParen>),
        "+" => Token::Plus(<tok::Plus>),
        "-" => Token::Minus(<tok::Minus>),
        "*" => Token::Star(<tok::Star>),
        ".." => Token::DotDot(<tok::DotDot>),
        ";" => Token::Semi(<tok::Semi>),
        "%" => Token::Percent(<tok::Percent>),
        "/" => Token::Slash(<tok::Slash>),
        "|" => Token::Pipe(<tok::Pipe>),
        "fn" => Token::Fn(<tok::Fn>),
        "else" => Token::Else(<tok::Else>),
        "struct" => Token::Struct(<tok::Struct>),
        "enum" => Token::Enum(<tok::Enum>),
        "{" => Token::LBrace(<tok::LBrace>),
        "}" => Token::RBrace(<tok::RBrace>),
        "->" => Token::Arrow(<tok::Arrow>),

        "=" => Token::Equal(<tok::Equal>),
        "<" => Token::Less(<tok::Less>),
        ">" => Token::Greater(<tok::Greater>),
        "<=" => Token::LessEqual(<tok::LessEqual>),
        ">=" => Token::GreaterEqual(<tok::GreaterEqual>),
        "true" => Token::True(<tok::True>),
        "false" => Token::False(<tok::False>),
    }
}

Ident: tok::Ident<'input> = "ident literal";

Integer: tok::Integer<'input> = "integer literal";

pub Program: Program<'ast, 'input> = Item* => Program::new(<>);

Item: Item<'ast, 'input> = "fn" Ident ":" Type "=" Closure => Item::Function(ItemFunction::new(<>));

StartType: &'ast Type<'ast, 'input> = {
    Ident => ctx.typ(Type::Named(TypeNamed::new(<>))),
    Tuple<Type> => ctx.typ(Type::Tuple(<>)),
    "(" <Type> ")",
};

Type = {
    StartType StartType "->" Type => ctx.typ(Type::Function(TypeFunction::new(<>))),
    StartType,
};

Pat: &'ast ExprPat<'ast, 'input> = {
    Lit => ctx.pat(ExprPat::Lit(<>)),
    Tuple<Pat> => ctx.pat(ExprPat::Tuple(<>)),
};

Paren: ExprParen<'ast, 'input> = "(" EndExpr ")" => ExprParen::new(<>);

Tuple<T>: PatTuple<T> = {
    "(" ")" => PatTuple::empty(<>),
    "(" T "," (T ",")* T? ")" => PatTuple::nonempty(<>),
}

Symbol: ExprSymbol = {
    "+" => ExprSymbol::Plus(<>),
    "-" => ExprSymbol::Minus(<>),
    "*" => ExprSymbol::Star(<>),
    ".." => ExprSymbol::DotDot(<>),
    ";" => ExprSymbol::Semi(<>),
    "%" => ExprSymbol::Percent(<>),
    "/" => ExprSymbol::Slash(<>),
    "=" => ExprSymbol::Equal(<>),
    "<" => ExprSymbol::Less(<>),
    ">" => ExprSymbol::Greater(<>),
    "<=" => ExprSymbol::LessEqual(<>),
    ">=" => ExprSymbol::GreaterEqual(<>),
};

Lit: ExprLit<'input> = {
    Integer => ExprLit::Integer(<>),
    Ident => ExprLit::Ident(<>),
    "true" => ExprLit::True(<>),
    "false" => ExprLit::False(<>),
};

Closure: ExprClosure<'ast, 'input> = (Branch "else")* Branch => ExprClosure::new(<>);

Branch: ExprBranch<'ast, 'input> = {
    "|" "|" InternalExpr => ExprBranch::zero(<>),
    "|" Param "|" InternalExpr => ExprBranch::one(<>),
    "|" Param "," Param "|" InternalExpr => ExprBranch::two(<>),
};

Param: ExprParam<'ast, 'input> = Pat (":" Type)? => ExprParam::new(<>);

Appl<Rhs>: ExprAppl<'ast, 'input> = Expr Term Rhs => ExprAppl::new(<>);

Term: &'ast Expr<'ast, 'input> = {
    Paren => ctx.expr(Expr::Paren(<>)),
    Symbol => ctx.expr(Expr::Symbol(<>)),
    Lit => ctx.expr(Expr::Lit(<>)),
    Tuple<EndExpr> => ctx.expr(Expr::Tuple(<>)),
    ! => {
        ctx.expr(Expr::Invalid)
    }
};

InternalTerm = {
    Term,
    Branch => ctx.expr(Expr::Closure(ExprClosure::new(vec![], <>))),
};

EndTerm = {
    Term,
    Closure => ctx.expr(Expr::Closure(<>)),
};

Expr = {
    Term,
    Appl<Term> => ctx.expr(Expr::Appl(<>)),
};

InternalExpr = {
    InternalTerm,
    Appl<InternalTerm> => ctx.expr(Expr::Appl(<>)),
};

pub EndExpr = {
    EndTerm,
    Appl<EndTerm> => ctx.expr(Expr::Appl(<>)),
};
