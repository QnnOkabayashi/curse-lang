use crate::{lexer::*, Parser};
use curse_ast::ast::{
    tok, Appl, Arm, ChoiceDef, Closure, Constructor, Expr, Field, FunctionDef,
    GenericArgs, GenericParams, Lit, NamedType, Param, Paren, Path, Pat, Program, Record, StructDef, 
    Symbol, Type, VariantDef, Variants,
    Region, RegionKind,
};
use curse_interner::Ident;
use curse_span::HasSpan;

grammar<'input>(parser: &mut Parser<'_>);

extern {
    type Location = usize;
    type Error = LexError;

    // Any changes here must also be reflected in:
    // - curse_parse/src/lexer.rs
    // - curse_ast/src/tok.rs
    enum Token<'input> {
        // In the grammar, if we specify the string on the lhs,
        // it means that we're waiting for the lexer to
        // give us the rhs.
        "ident literal" => Token::Ident(<tok::Literal<'input>>),
        "type ident literal" => Token::TypeIdent(<tok::Literal<'input>>),
        "integer literal" => Token::Integer(<tok::Literal<'input>>),
        ":" => Token::Colon(<tok::Colon>),
        "::" => Token::ColonColon(<tok::ColonColon>),
        "," => Token::Comma(<tok::Comma>),
        "(" => Token::LParen(<tok::LParen>),
        ")" => Token::RParen(<tok::RParen>),
        "+" => Token::Plus(<tok::Plus>),
        "-" => Token::Minus(<tok::Minus>),
        "*" => Token::Star(<tok::Star>),
        "." => Token::Dot(<tok::Dot>),
        ".." => Token::DotDot(<tok::DotDot>),
        ";" => Token::Semi(<tok::Semi>),
        "%" => Token::Percent(<tok::Percent>),
        "/" => Token::Slash(<tok::Slash>),
        "|" => Token::Pipe(<tok::Pipe>),
        "fn" => Token::Fn(<tok::Fn>),
        "choice" => Token::Choice(<tok::Choice>),
        "struct" => Token::Struct(<tok::Struct>),
        "{" => Token::LBrace(<tok::LBrace>),
        "}" => Token::RBrace(<tok::RBrace>),
        "->" => Token::Arrow(<tok::Arrow>),

        "=" => Token::Eq(<tok::Eq>),
        "<" => Token::Lt(<tok::Lt>),
        ">" => Token::Gt(<tok::Gt>),
        "<=" => Token::Le(<tok::Le>),
        ">=" => Token::Ge(<tok::Ge>),

        "true" => Token::True(<tok::True>),
        "false" => Token::False(<tok::False>),
        "ref" => Token::Ref(<tok::Ref>),
        "mut" => Token::Mut(<tok::Mut>),
    }
}

/// === Term Aliases ===

Ident: Ident = "ident literal" => Ident::new_in(<>.as_ref(), <>.span(), parser.interner);
TypeIdent: Ident = "type ident literal" => Ident::new_in(<>.as_ref(), <>.span(), parser.interner);
Integer: Ident = "integer literal" => Ident::new_in(<>.as_ref(), <>.span(), parser.interner);


/// === Program ===

pub Program: Program = {
    FunctionDef => Program::default().with_function_def(<>),
    ChoiceDef => Program::default().with_choice_def(<>),
    StructDef => Program::default().with_struct_def(<>),

    Program FunctionDef => Program::with_function_def(<>),
    Program ChoiceDef => Program::with_choice_def(<>),
    Program StructDef => Program::with_struct_def(<>),

    ! => {
        parser.errors.push(<>.error.into());
        Program::default()
    }
};

/// === Definitions ===

GenericParams: GenericParams = {
    "|" (TypeIdent "*")* TypeIdent "|" => GenericParams::new(<>),
};

// ExplicitTypes: ExplicitTypes = {
//     GenericParams? ":" Ref<Type> => ExplicitTypes::new(<>),
// }

FunctionDef: FunctionDef = {
    "fn" Ident Closure => FunctionDef::new(<>),
    // "fn" Ident ExplicitTypes? Closure => FunctionDef::new(<>),
};

StructDef: StructDef = {
    "struct" TypeIdent GenericParams? Type => StructDef::new(<>),
};

ChoiceDef: ChoiceDef = {
    "choice" TypeIdent GenericParams? Variants => ChoiceDef::new(<>),
};

Variants: Variants = {
    "{" (VariantDef ",")* VariantDef? "}" => Variants::new(<>),
}

VariantDef: VariantDef = {
    TypeIdent Type => VariantDef::new(<>),
};


/// === Record ===

Record<T>: Record<T> = {
    "{" (Field<T> ",")* Field<T>? "}" => Record::new(<>),
};

Field<T>: Field<T> = {
    Ident (":" T)? => Field::new(<>),
};

Box<T>: Box<T> = {
    T => Box::new(<>),
}


/// === Types ===

Type: Type = {
    Box<NamedType> => Type::Named(<>),
    Box<Record<Type>> => Type::Record(<>),
    ! => {
        parser.errors.push(<>.error.into());
        Type::Error
    }
};

GenericArgs: GenericArgs = {
    Type => GenericArgs::Single(<>),
    "(" (Type "*")* Type ")" => GenericArgs::CartesianProduct(<>),
};

NamedType: NamedType = {
    TypePath GenericArgs? => NamedType::new(<>),
};


/// === Patterns ===

Pat: Pat = {
    Lit => Pat::Lit(<>),
    Box<Record<Pat>> => Pat::Record(<>),
    Box<Constructor<Pat>> => Pat::Constructor(<>),
};


/// === Shared ===

Lit: Lit = {
    Integer => Lit::Integer(<>),
    Ident => Lit::Ident(<>),
    "true" => Lit::True(<>),
    "false" => Lit::False(<>),
};

Path: Path = {
    (Ident "::")* Ident => Path::new(<>),
};

TypePath: Path = {
    (Ident "::")* TypeIdent => Path::new(<>),
};

Constructor<T>: Constructor<T> = {
    TypePath ("::" TypeIdent)? T => Constructor::new(<>),
};


/// === Expressions ===

Symbol: Symbol = {
    "+" => Symbol::Plus(<>),
    "-" => Symbol::Minus(<>),
    "*" => Symbol::Star(<>),
    "." => Symbol::Dot(<>),
    ".." => Symbol::DotDot(<>),
    ";" => Symbol::Semi(<>),
    "%" => Symbol::Percent(<>),
    "/" => Symbol::Slash(<>),
    "=" => Symbol::Eq(<>),
    "<" => Symbol::Lt(<>),
    ">" => Symbol::Gt(<>),
    "<=" => Symbol::Le(<>),
    ">=" => Symbol::Ge(<>),
};

ClosureNonpiecewise: Closure = {
    Arm => Closure::NonPiecewise(<>),
};

ClosurePiecewise: Closure = {
    "(" ")" => Closure::Empty(<>),
    "(" (Arm ",")+ Arm? ")" => Closure::Piecewise(<>),
};

Closure = {
    ClosureNonpiecewise,
    ClosurePiecewise,
};

Arm: Arm = {
    "|" (Param ",")* Param? "|" EndExpr => Arm::new(<>),
};

Param: Param = {
    Pat (":" Type)? => Param::new(<>),
};

Appl<Rhs>: Appl = {
    Expr Term Rhs => Appl::new(<>),
};

Region: Region = {
    RegionKind Pat "{" EndExpr "}" => Region::new(<>),
};

RegionKind: RegionKind = {
    "ref" => RegionKind::Ref(<>),
    "mut" => RegionKind::Mut(<>),
    "ref" "mut" => RegionKind::RefMut(<>),
}

Paren: Paren = {
    "(" EndExpr ")" => Paren::new(<>),
};

Term: Expr = {
    Box<Paren> => Expr::Paren(<>),
    Symbol => Expr::Symbol(<>),
    Lit => Expr::Lit(<>),
    Box<Record<EndExpr>> => Expr::Record(<>),
    Box<ClosurePiecewise> => Expr::Closure(<>),
    Box<Region> => Expr::Region(<>),
    ! => {
        parser.errors.push(<>.error.into());
        Expr::Error
    }
};

EndTerm = {
    Term,
    Box<Constructor<EndExpr>> => Expr::Constructor(<>),
    Box<ClosureNonpiecewise> => Expr::Closure(<>),
};

Expr = {
    Term,
    Box<Appl<Term>> => Expr::Appl(<>),
};

pub EndExpr = {
    EndTerm,
    Box<Appl<EndTerm>> => Expr::Appl(<>),
};
