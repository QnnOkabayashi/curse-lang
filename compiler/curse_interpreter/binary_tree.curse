dynamic_import "std.curse"

choice Tree |T| {
    Node {
        key: I32,
        value: T,
        left: Tree T,
        right: Tree T,
    },
    Empty {},
}

fn insert (
    |Tree::Empty {}, { k, v }|
        Tree::Node {
            key: k,
            value: v,
            left: Tree::Empty {},
            right: Tree::Empty {},
        },
    |Tree::Node { key, value, left, right }, { k, v }|
        k cmp key in (
            |Ordering::Greater {}| 
                right insert { k, v } in |right|
                Tree::Node { key, value, left, right },
            |Ordering::Less {}| 
                left insert { k, v } in |left|
                Tree::Node { key, value, left, right },
            |Ordering::Equal {}|
                Tree::Node { key, value: v, left, right }
        )
)

fn get (
    |Tree::Empty {}, _|
        Option::None {},
    |Tree::Node { key, value, left, right }, k|
        k cmp key in (
            |Ordering::Greater {}| right get k,
            |Ordering::Less {}| left get k,
            |Ordering::Equal {}| Option::Some value,
        )
)

fn remove (
    |Tree::Empty {}, _| Tree::Empty {},
    |Tree::Node { key, value, left, right }, k|
        k cmp key in (
            |Ordering::Less {}|
                left remove k in |left|
                Tree::Node { key, value, left, right },
            |Ordering::Greater {}|
                right remove k in |right|
                Tree::Node { key, value, left, right },
            |Ordering::Equal {}|
                { left, right } in (
                    |{ left: Tree::Empty {}, right }| right,
                    |{ left, right: Tree::Empty {} }| left,
                    |{ left, right }| 
                        max_pair of left in (
                            |Option::Some { key_max, key_value }|
                                Tree::Node { key: key_max, value: key_value, left: left remove key_max, right },
                            |Option::None {}| unreachable,
                        )
                )
        )
)

fn max_pair (
    |Tree::Empty {}| Option::None {},
    |Tree::Node { key, value, left, right }|
        Option::Some (
            max_pair of right in (
                |Option::Some pair| pair,
                |Option::None {}| { key, value },
            )
        )
)

fn main || (
    Tree::Empty {}
        insert { k: 3, v: 3 }
        insert { k: 1, v: 1 }
        insert { k: 0, v: 0 }
        insert { k: 2, v: 2 }
        insert { k: 4, v: 4 }
        remove 1
)

