dynamic_import std

choice List {
    Cons {
        value: I32,
        next: List,
    },
    Nil {},
}

fn push_back (
    |List::Nil {}, x|
        List::Cons {
            value: x,
            next: List::Nil{},
        },
    |List::Cons { value, next }, x|
        List::Cons {
            value,
            next: next push_back x,
        }
)

fn reverse (
    |List::Nil {}| List::Nil {},
    |List::Cons { value, next }| next
        in reverse
        push_back value
)

fn reverse_fast |src|
    { src, dst: List::Nil {} } rec |loop| (
        |{ src: List::Nil {}, dst }| dst,
        |{ src: List::Cons { value, next }, dst }| loop of {
            src: next,
            dst: List::Cons {
                value,
                next: dst,
            },
        },
    )

fn map (
    |List::Nil {}, _| List::Nil {},
    |List::Cons { value, next }, f|
        List::Cons {
            value: f of value,
            next: next map f
        }
)

fn filter (
    |List::Nil {}, _| List::Nil {},
    |List::Cons { value, next }, p| value in p
        then_do (|| List::Cons { value, next: next filter p })
        else_do || next filter p
)

fn filter_map (
    |List::Nil {}, _| List::Nil {},
    |List::Cons { value, next }, f| f of value in (
        |Option::Some value| List::Cons {
            value,
            next: next filter_map f,
        },
        |Option::None {}| next filter_map f,
    ),
)

fn foldr (
    |List::Nil {}, { init, f }| init,
    |List::Cons { value, next }, { init, f }|
        value f (next foldr { init, f })
)

// nice tail-recursive impl with `rec`
fn foldl |list, { init, f }|
    { list, acc: init } rec |loop| (
        |{ list: List::Nil {}, acc }| acc,
        |{ list: List::Cons { value, next }, acc }|
            loop of {
                list: next,
                acc: acc f value,
            }
    )

// |T| (T, T -> Option T) -> List T
fn unfold |init, f|
    List::Cons {
        value: init,
        next: init in f in (
            |Option::Some next_val| next_val unfold f,
            |Option::None {}| List::Nil {},
        )
    }

// usage: list1 (zip_with of f) list2
fn zip_with |f| (
    |List::Nil {}, _| List::Nil {},
    |_, List::Nil {}| List::Nil {},
    |List::Cons { value: x, next: xs }, List::Cons { value: y, next: ys }|
        List::Cons {
            value: x f y,
            next: xs (zip_with of f) ys
        }
)

fn enumerate |ls|
    ls (zip_with of |x, i| { x, i }) (1 range (length of ls))

// inclusive on both ends
fn range |a, b|
    a unfold |x| x < b then_do || x + 1

fn length |ls| ls foldl { init: 0, f: |acc, _| acc + 1}
fn sum |ls| ls foldl { init: 0, f: + }

fn index (
    |List::Nil {}, k| Option::None {},
    |List::Cons { value, next }, 0| Option::Some value,
    |List::Cons { value, next }, k| next index (k - 1),
)

fn last (
    |List::Nil {}| Option::None {},
    |List::Cons { value, next: List::Nil {} }| Option::Some value,
    |List::Cons { value, next }| next in last,
)
    
// removing `main` so we can import as a library
