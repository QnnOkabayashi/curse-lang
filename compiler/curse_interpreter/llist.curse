dynamic_import "std.curse"

choice List {
    Cons {
        value: I32,
        next: List,
    },
    Nil {},
}

fn push_back (
    |List::Nil {}, x|
        List::Cons {
            value: x,
            next: List::Nil{},
        },
    |List::Cons { value, next }, x|
        List::Cons {
            value,
            next: next push_back x,
        }
)

fn reverse (
    |List::Nil {}| List::Nil {},
    |List::Cons { value, next }| next
        in reverse
        push_back value
)

fn reverse_fast |src|
    { src, dst: List::Nil {} } rec |loop| (
        |{ src: List::Nil {}, dst }| dst,
        |{ src: List::Cons { value, next }, dst }| loop of {
            src: next,
            dst: List::Cons {
                value,
                next: dst,
            },
        },
    )

fn map (
    |List::Nil {}, _| List::Nil {},
    |List::Cons { value, next }, f|
        List::Cons {
            value: f of value,
            next: next map f
        }
)

fn filter (
    |List::Nil {}, _| List::Nil {},
    |List::Cons { value, next }, p| value in p
        then_do (|| List::Cons { value, next: next filter p })
        else_do || next filter p
)

fn foldr (
    |List::Nil {}, { init, f }| init,
    |List::Cons { value, next }, { init, f }|
        value f (next foldr { init, f })
)

// nice tail-recursive impl with `rec`
fn foldl |list, { init, f }|
    { list, acc: init } rec |loop| (
        |{ list: List::Nil {}, acc }| acc,
        |{ list: List::Cons { value, next }, acc }|
            loop of {
                list: next,
                acc: acc f value,
            }
    )

// |T| (T, T -> Option T) -> List T
fn unfold |init, f|
    List::Cons {
        value: init,
        next: init in f in (
            |Option::Some next_val| next_val unfold f,
            |Option::None {}| List::Nil {},
        )
    }

fn range |a, b|
    a unfold |x| x < (b - 1) then_do || x + 1
    
fn main ||
    1 range 10
        map (|x| x + 1)
        filter (|x| x % 2 = 0)
        foldl { init: 0, f: + }

