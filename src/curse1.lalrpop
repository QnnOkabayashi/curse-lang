use crate::ast::{Arena, Expr, Symbol, Pat, Lit, Closure, Appl, Branch, Program, TopLevel, ItemFunction, Tuple};
use crate::lex::{LexError, Token, tok};

grammar<'ast, 'input>(alloc: &'ast Arena<'ast, 'input>);

extern {
    type Location = usize;
    type Error = LexError;

    enum Token<'input> {
        // In the grammar, if we specify the string on the lhs,
        // it means that we're waiting for the lexer to
        // give us the rhs.
        "ident literal" => Token::Ident(<tok::Ident<'input>>),
        "integer literal" => Token::Integer(<tok::Integer<'input>>),
        ":" => Token::Colon(<tok::Colon>),
        "," => Token::Comma(<tok::Comma>),
        "(" => Token::LParen(<tok::LParen>),
        ")" => Token::RParen(<tok::RParen>),
        "=" => Token::Equal(<tok::Equal>),
        "+" => Token::Plus(<tok::Plus>),
        "-" => Token::Minus(<tok::Minus>),
        "*" => Token::Star(<tok::Star>),
        ".." => Token::DotDot(<tok::DotDot>),
        ";" => Token::Semi(<tok::Semi>),
        "%" => Token::Percent(<tok::Percent>),
        "/" => Token::Slash(<tok::Slash>),
        "|" => Token::Pipe(<tok::Pipe>),
        "fn" => Token::Fn(<tok::Fn>),
        "else" => Token::Else(<tok::Else>),
    }
}

Ident: tok::Ident<'input> = "ident literal";

Integer: tok::Integer<'input> = "integer literal";

pub Program: Program<'ast, 'input> = TopLevel* => Program::new(<>);

pub TopLevel: TopLevel<'ast, 'input> = "fn" Ident ":" "=" Closure => TopLevel::Function(ItemFunction::new(<>));

Pat: Pat<'input> = {
    Lit => Pat::Lit(<>),
    Tuple<Pat> => Pat::Tuple(<>),
};

Comma<T>: Vec<T> = <mut v:(<T> ",")+> <e:T?> => {
    if let Some(e) = e {
        v.push(e);
    }
    v
};

Paren<T>: T = "(" <T> ")";

Tuple<T>: Tuple<T> = "(" (T ",")+ T? ")" => Tuple::new(<>);

Symbol: Symbol = {
    "(" ")" => Symbol::Unit(<>),
    "+" => Symbol::Plus(<>),
    "-" => Symbol::Minus(<>),
    "*" => Symbol::Star(<>),
    ".." => Symbol::DotDot(<>),
    ";" => Symbol::Semi(<>),
    "%" => Symbol::Percent(<>),
    "/" => Symbol::Slash(<>),
};

Lit: Lit<'input> = {
    Integer => Lit::Integer(<>),
    Ident => Lit::Ident(<>),
};

Closure: Closure<'ast, 'input> = (Branch "else")* Branch => Closure::new(<>);

Branch: Branch<'ast, 'input> = {
    "|" "|" InternalExpr => Branch::zero(<>),
    "|" Pat "|" InternalExpr => Branch::one(<>),
    "|" Pat Pat "|" InternalExpr => Branch::two(<>),
};

Appl<Rhs>: Appl<'ast, 'input> = <lhs:Expr> <fun:Term> <rhs:Rhs> => Appl::new(<>);

Term = {
    Paren<EndExpr>,
    Symbol => alloc.symbol(<>),
    Lit => alloc.lit(<>),
    Tuple<EndExpr> => alloc.tuple(<>),
};

InternalTerm = {
    Term,
    Branch => alloc.closure(Closure::new(vec![], <>)),
};

EndTerm = {
    Term,
    Closure => alloc.closure(<>),
};

Expr = {
    Term,
    Appl<Term> => alloc.appl(<>),
};

InternalExpr = {
    InternalTerm,
    Appl<InternalTerm> => alloc.appl(<>),
};

pub EndExpr: &'ast Expr<'ast, 'input> = {
    EndTerm,
    Appl<EndTerm> => alloc.appl(<>),
};
